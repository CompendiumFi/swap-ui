{"version":3,"sources":["../../src/utils/pubkeys.ts","../../src/context/TokenList.tsx","../../src/context/Sollet.tsx","../../src/utils/tokens.ts","../../src/context/Token.tsx","../../src/context/Dex.tsx","../../src/context/Swap.tsx","../../src/components/TokenDialog.tsx","../../src/components/OpenOrdersDialog.tsx","../../src/components/Settings.tsx","../../src/components/Info.tsx","../../src/components/Swap.tsx","../../src/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","WRAPPED_SOL_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","TokenListContextProvider","props","tokenList","useMemo","filterByClusterSlug","getList","tokenMap","Map","forEach","t","set","address","swappableTokens","tokens","filter","extensions","serumV3Usdt","serumV3Usdc","sort","a","b","symbol","tags","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","get","toString","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","name","publicKey","filters","getOwnedAccountsFilters","_rpcRequest","TOKEN_PROGRAM_ID","toBase58","commitment","message","pubkey","account","data","executable","owner","lamports","accountInfo","bs58","every","dataSize","length","memcmp","filterBytes","bytes","slice","offset","equals","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","offsetOf","span","_TokenContext","TokenContextProvider","provider","useState","setRefresh","useEffect","wallet","_OWNED_TOKEN_ACCOUNTS_CACHE","r","getOwnedTokenAccounts","then","accs","push","acc","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","isSol","listener","onAccountChange","token","index","indexOf","assert","removeAccountChangeListener","useMint","asyncMintInfo","useAsync","_MINT_CACHE","mintClient","Token","Account","mintInfo","getMintInfo","FEE_MULTIPLIER","_DexContext","DexContextProvider","ooAccounts","setOoAccounts","swapClient","closeOpenOrders","openOrder","newOoAccounts","openOrders","market","oo","delete","program","OpenOrders","findForOwner","markets","Set","add","size","anchor","rpc","getMultipleAccounts","Array","from","values","m","multipleMarkets","marketClients","programAccount","Market","getLayout","opts","mintPubkeys","baseMintAddress","quoteMintAddress","flat","pk","mints","mintInfos","MintLayout","Promise","resolve","baseMintInfo","quoteMintInfo","_baseSplTokenDecimals","decimals","_quoteSplTokenDecimals","_MARKET_CACHE","useDexContext","useOpenOrders","useMarket","asyncMarket","marketClient","load","useBbo","orderbook","refresh","asyncOrderbook","_ORDERBOOK_CACHE","all","loadBids","loadAsks","bids","asks","bidsAddress","OrderbookSide","oldBestBid","items","next","newBestBid","price","asksAddress","oldBestOffer","newBestOffer","useOrderbook","bestBid","bestOffer","mid","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","log","padToTwo","n","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","isStrict","setIsStrict","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","setFromAmount","setToAmount","swapToFromMints","oldFrom","oldTo","useSwapContext","useSwapFair","fairRoute","fromBbo","fromMarket","toBbo","useFairRoute","useStyles","makeStyles","theme","dialogContent","padding","textField","marginBottom","tab","minWidth","tabSelected","color","palette","primary","contrastText","fontWeight","backgroundColor","main","borderRadius","tabIndicator","opacity","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","displayTabs","useMediaQuery","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","width","DialogTitle","Typography","variant","paddingBottom","TextField","className","placeholder","fullWidth","onChange","e","target","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","classes","indicator","Tab","selected","label","ListItem","button","TokenIcon","TokenName","marginLeft","fontSize","table","closeAccount","OpenOrdersDialog","maxWidth","display","justifyContent","IconButton","Close","paddingTop","OpenOrdersAccounts","openOrdersEntries","entries","TableContainer","component","Paper","elevation","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","_closeOpenOrders","accounts","authority","destination","dexProgram","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","toFixed","settingsButton","closeAccountSwitchLabel","text","secondary","fairAutoSelected","fairAuto","type","light","boxShadow","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","parseFloat","flexDirection","InputProps","endAdornment","InputAdornment","position","marginRight","flex","margin","CloseNewAccountsSwitch","FormGroup","row","FormControlLabel","labelPlacement","control","Switch","checked","infoLabel","alignItems","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","bbo","card","spacing","swapButton","swapToFromButton","cursor","amountInput","input","textAlign","swapTokenFormContainer","swapTokenSelectorContainer","balanceContainer","maxButton","tokenButton","SwapCard","containerStyle","contentStyle","swapTokenContainerStyle","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","useTheme","ImportExportRounded","htmlColor","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","balance","formattedAmount","toLocaleString","maximumFractionDigits","useGrouping","TokenButton","disableUnderline","root","ExpandMore","logoURI","alt","src","toMintInfo","toMarket","canSwap","fromWallet","useCanSwap","asyncReferral","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","useReferral","toWallet","sendSwapTransaction","txs","wrappedSolAccount","Keypair","generate","wrapSol","minExchangeRate","rate","muln","divn","fromDecimals","quoteDecimals","strict","fromOpenOrders","toOpenOrders","fromWalletAddr","toWalletAddr","swapTxs","close","unwrapSol","sendAll","tx","Transaction","SystemProgram","getMinBalanceRentForExemptAccount","fromPubkey","newAccountPubkey","space","programId","createAccount","transfer","toPubkey","createInitAccountInstruction","createCloseAccountInstruction","Swap","materialTheme","SwapClient","createMuiTheme","ThemeProvider","minHeight","paddingLeft","paddingRight","AppInner","enqueueSnackbar","useSnackbar","isConnected","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","err","action","TokenListProvider","on","Grid","container","justify","disconnect","connect","right","top","onTransaction","txSig","this","txSigs","sig","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a25552cf.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(\n    () => props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList(),\n    [props.tokenList]\n  );\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isUsdxQuoted =\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n      return isUsdxQuoted;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest(\"getProgramAccounts\", [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      \"failed to get token accounts owned by \" +\n        publicKey.toBase58() +\n        \": \" +\n        resp.error.message\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }: any) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    })\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider, BN } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  MintInfo,\n  AccountInfo as TokenAccount,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts, parseTokenAccountData } from \"../utils/tokens\";\nimport { WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\n\nexport type TokenContext = {\n  provider: Provider;\n};\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [, setRefresh] = useState(0);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\n      setRefresh((r) => r + 1);\n      return;\n    }\n    // Fetch SPL tokens.\n    getOwnedTokenAccounts(provider.connection, provider.wallet.publicKey).then(\n      (accs) => {\n        if (accs) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\n          setRefresh((r) => r + 1);\n        }\n      }\n    );\n    // Fetch SOL balance.\n    provider.connection\n      .getAccountInfo(provider.wallet.publicKey)\n      .then((acc: { lamports: number }) => {\n        if (acc) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push({\n            publicKey: provider.wallet.publicKey,\n            // @ts-ignore\n            account: {\n              amount: new BN(acc.lamports),\n              mint: WRAPPED_SOL_MINT,\n            },\n          });\n          setRefresh((r) => r + 1);\n        }\n      });\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        provider,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nfunction useTokenContext() {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const { provider } = useTokenContext();\n  const [, setRefresh] = useState(0);\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\n    (account) => mint && account.account.mint.equals(mint)\n  );\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount > b.account.amount\n      ? -1\n      : a.account.amount < b.account.amount\n      ? 1\n      : 0\n  );\n\n  let tokenAccount = tokenAccounts[0];\n  const isSol = mint?.equals(WRAPPED_SOL_MINT);\n\n  // Stream updates when the balance changes.\n  useEffect(() => {\n    let listener: number;\n    // SOL is special cased since it's not an SPL token.\n    if (tokenAccount && isSol) {\n      listener = provider.connection.onAccountChange(\n        provider.wallet.publicKey,\n        (info: { lamports: number }) => {\n          const token = {\n            amount: new BN(info.lamports),\n            mint: WRAPPED_SOL_MINT,\n          } as TokenAccount;\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    // SPL tokens.\n    else if (tokenAccount) {\n      listener = provider.connection.onAccountChange(\n        tokenAccount.publicKey,\n        (info) => {\n          const token = parseTokenAccountData(info.data);\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        provider.connection.removeAccountChangeListener(listener);\n      }\n    };\n  }, [provider.connection, tokenAccount]);\n\n  if (mint === undefined) {\n    return undefined;\n  }\n\n  if (!isSol && tokenAccounts.length === 0) {\n    return null;\n  }\n\n  return tokenAccount;\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const { provider } = useTokenContext();\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (_MINT_CACHE.get(mint.toString())) {\n      return _MINT_CACHE.get(mint.toString());\n    }\n\n    const mintClient = new Token(\n      provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = mintClient.getMintInfo();\n    _MINT_CACHE.set(mint.toString(), mintInfo);\n    return mintInfo;\n  }, [provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n\nexport function setMintCache(pk: PublicKey, account: MintInfo) {\n  _MINT_CACHE.set(pk.toString(), new Promise((resolve) => resolve(account)));\n}\n\n// Cache storing all token accounts for the connected wallet provider.\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\n  publicKey: PublicKey;\n  account: TokenAccount;\n}> = [];\n\n// Cache storing all previously fetched mint infos.\nconst _MINT_CACHE = new Map<string, Promise<MintInfo>>();\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\nimport { setMintCache } from \"./Token\";\n\nconst BASE_TAKER_FEE_BPS = 0.0022;\nexport const FEE_MULTIPLIER = 1 - BASE_TAKER_FEE_BPS;\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  closeOpenOrders: (openOrder: OpenOrders) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Removes the given open orders from the context.\n  const closeOpenOrders = async (openOrder: OpenOrders) => {\n    const newOoAccounts = new Map(ooAccounts);\n    const openOrders = newOoAccounts\n      .get(openOrder.market.toString())\n      ?.filter((oo: OpenOrders) => !oo.address.equals(openOrder.address));\n    if (openOrders && openOrders.length > 0) {\n      newOoAccounts.set(openOrder.market.toString(), openOrders);\n    } else {\n      newOoAccounts.delete(openOrder.market.toString());\n    }\n    setOoAccounts(newOoAccounts);\n  };\n\n  // Three operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  // 3. Batch fetch all mints associated with the markets.\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const multipleMarkets = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        Array.from(markets.values()).map((m) => new PublicKey(m))\n      );\n      const marketClients = multipleMarkets.map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Set below so that we can batch fetch mints.\n            -1, // Set below so that we can batch fetch mints.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n\n      setOoAccounts(newOoAccounts);\n\n      // Batch fetch all the mints, since we know we'll need them at some\n      // point.\n      const mintPubkeys = Array.from(\n        new Set<string>(\n          marketClients\n            .map((m) => [\n              m.account.baseMintAddress.toString(),\n              m.account.quoteMintAddress.toString(),\n            ])\n            .flat()\n        ).values()\n      ).map((pk) => new PublicKey(pk));\n\n      if (mintPubkeys.length > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\"Too many mints. Please file an issue to update this\");\n      }\n\n      const mints = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        mintPubkeys\n      );\n      const mintInfos = mints.map((mint) => {\n        const mintInfo = MintLayout.decode(mint!.account.data);\n        setMintCache(mint!.publicKey, mintInfo);\n        return { publicKey: mint!.publicKey, mintInfo };\n      });\n\n      marketClients.forEach((m) => {\n        const baseMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.baseMintAddress)\n        )[0];\n        const quoteMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.quoteMintAddress)\n        )[0];\n        assert.ok(baseMintInfo && quoteMintInfo);\n        // @ts-ignore\n        m.account._baseSplTokenDecimals = baseMintInfo.mintInfo.decimals;\n        // @ts-ignore\n        m.account._quoteSplTokenDecimals = quoteMintInfo.mintInfo.decimals;\n        _MARKET_CACHE.set(\n          m.publicKey!.toString(),\n          new Promise<Market>((resolve) => resolve(m.account))\n        );\n      });\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        closeOpenOrders,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const { swapClient } = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (_MARKET_CACHE.get(market.toString())) {\n      return _MARKET_CACHE.get(market.toString());\n    }\n\n    const marketClient = new Promise<Market>(async (resolve) => {\n      // TODO: if we already have the mints, then pass them through to the\n      //       market client here to save a network request.\n      const marketClient = await Market.load(\n        swapClient.program.provider.connection,\n        market,\n        swapClient.program.provider.opts,\n        DEX_PID\n      );\n      resolve(marketClient);\n    });\n\n    _MARKET_CACHE.set(market.toString(), marketClient);\n    return marketClient;\n  }, [swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const [refresh, setRefresh] = useState(0);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (_ORDERBOOK_CACHE.get(market.toString())) {\n      return _ORDERBOOK_CACHE.get(market.toString());\n    }\n\n    const orderbook = new Promise<Orderbook>(async (resolve) => {\n      const [bids, asks] = await Promise.all([\n        marketClient.loadBids(swapClient.program.provider.connection),\n        marketClient.loadAsks(swapClient.program.provider.connection),\n      ]);\n\n      resolve({\n        bids,\n        asks,\n      });\n    });\n\n    _ORDERBOOK_CACHE.set(market.toString(), orderbook);\n\n    return orderbook;\n  }, [refresh, swapClient.program.provider.connection, market, marketClient]);\n\n  // Stream in bids updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.bidsAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.bidsAddress,\n        async (info) => {\n          const bids = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestBid = orderbook?.bids.items(true).next().value;\n          const newBestBid = bids.items(true).next().value;\n          if (\n            orderbook &&\n            oldBestBid &&\n            newBestBid &&\n            oldBestBid.price !== newBestBid.price\n          ) {\n            orderbook.bids = bids;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Stream in asks updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.asksAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.asksAddress,\n        async (info) => {\n          const asks = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\n          const newBestOffer = asks.items(false).next().value;\n          if (\n            orderbook &&\n            oldBestOffer &&\n            newBestOffer &&\n            oldBestOffer.price !== newBestOffer.price\n          ) {\n            orderbook.asks = asks;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useBbo(market?: PublicKey): Bbo | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid && !bestOffer) {\n    return {};\n  }\n  if (!bestBid) {\n    return { bestOffer: bestOffer.price };\n  }\n  if (!bestOffer) {\n    return { bestBid: bestBid.price };\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromBbo = useBbo(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toBbo = useBbo(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromBbo !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (fromMarket?.baseMintAddress.equals(fromMint)) {\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\n    } else {\n      return fromBbo.bestOffer && fromBbo.bestOffer;\n    }\n  }\n  if (\n    fromBbo === undefined ||\n    fromBbo.bestBid === undefined ||\n    toBbo === undefined ||\n    toBbo.bestOffer === undefined\n  ) {\n    return undefined;\n  }\n  return toBbo.bestOffer / fromBbo.bestBid;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(fromMint, toMint);\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n\ntype Bbo = {\n  bestBid?: number;\n  bestOffer?: number;\n  mid?: number;\n};\n\nconst _ORDERBOOK_CACHE = new Map<string, Promise<Orderbook>>();\nconst _MARKET_CACHE = new Map<string, Promise<Market>>();\n","import * as assert from \"assert\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Market } from \"@project-serum/serum\";\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\nimport {\n  useFairRoute,\n  useRouteVerbose,\n  useDexContext,\n  FEE_MULTIPLIER,\n} from \"./Dex\";\nimport {\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./TokenList\";\nimport { useOwnedTokenAccount } from \"../context/Token\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // The referral *owner* address. Associated token accounts must be created,\n  // first, for this to be used.\n  referral?: PublicKey;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n\n  // True if the swap exchange rate should be a function of nothing but the\n  // from and to tokens, ignoring any quote tokens that may have been\n  // accumulated by performing the swap.\n  //\n  // Always false (for now).\n  isStrict: boolean;\n  setIsStrict: (isStrict: boolean) => void;\n\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  const [isStrict, setIsStrict] = useState(false);\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n  const referral = props.referral;\n\n  assert.ok(slippage >= 0);\n\n  useEffect(() => {\n    if (!fair) {\n      return;\n    }\n    setFromAmount(fromAmount);\n  }, [fair]);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    _setFromAmount(oldToAmount);\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setFromAmount(amount);\n    _setToAmount(FEE_MULTIPLIER * (amount / fair));\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setToAmount(amount);\n    _setFromAmount((amount * fair) / FEE_MULTIPLIER);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        isStrict,\n        setIsStrict,\n        setIsClosingNewAccounts,\n        referral,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n\n// Returns true if the user can swap with the current context.\nexport function useCanSwap(): boolean {\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const fromWallet = useOwnedTokenAccount(fromMint);\n  const fair = useSwapFair();\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return false;\n  }\n\n  return (\n    // From wallet exists.\n    fromWallet !== undefined &&\n    fromWallet !== null &&\n    // Fair price is defined.\n    fair !== undefined &&\n    fair > 0 &&\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\n  );\n}\n\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\n  const { referral } = useSwapContext();\n  const asyncReferral = useAsync(async () => {\n    if (!referral) {\n      return undefined;\n    }\n    if (!fromMarket) {\n      return undefined;\n    }\n    if (\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\n    ) {\n      return undefined;\n    }\n\n    return Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      fromMarket.quoteMintAddress,\n      referral\n    );\n  }, [fromMarket]);\n\n  if (!asyncReferral.result) {\n    return undefined;\n  }\n  return asyncReferral.result;\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"../context/TokenList\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    padding: 0,\n  },\n  textField: {\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n  tabSelected: {\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: \"10px\",\n  },\n  tabIndicator: {\n    opacity: 0,\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const displayTabs = !useMediaQuery(\"(max-width:450px)\");\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          fullWidth\n          variant=\"outlined\"\n          onChange={(e) => setTokenFilter(e.target.value)}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      {displayTabs && (\n        <DialogActions>\n          <Tabs\n            value={tabSelection}\n            onChange={(e, v) => setTabSelection(v)}\n            classes={{\n              indicator: styles.tabIndicator,\n            }}\n          >\n            <Tab\n              value={0}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Main\"\n            />\n            <Tab\n              value={1}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Wormhole\"\n            />\n            <Tab\n              value={2}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Sollet\"\n            />\n          </Tabs>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem\n      button\n      onClick={() => onClick(mint)}\n      style={{ padding: \"10px 20px\" }}\n    >\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n","import { useState, useMemo, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { DEX_PID } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  closeAccount: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport default function OpenOrdersDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <IconButton\n          onClick={onClose}\n          style={{\n            padding: 10,\n          }}\n        >\n          <Close />\n        </IconButton>\n      </div>\n      <DialogContent style={{ paddingTop: 0 }}>\n        <OpenOrdersAccounts />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\n      new PublicKey(market),\n      oo,\n    ]);\n  }, [openOrders]);\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {openOrdersEntries.map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market.toString()}\n                market={market}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const styles = useStyles();\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  useEffect(() => {\n    setOoAccount(openOrders[0]);\n  }, [openOrders]);\n  const { swapClient, closeOpenOrders } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const _closeOpenOrders = async () => {\n    await swapClient.program.rpc.closeAccount({\n      accounts: {\n        openOrders: ooAccount.address,\n        authority: swapClient.program.provider.wallet.publicKey,\n        destination: swapClient.program.provider.wallet.publicKey,\n        market: marketClient!.address,\n        dexProgram: DEX_PID,\n      },\n    });\n    closeOpenOrders(ooAccount);\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          disabled={closeDisabled}\n          onClick={_closeOpenOrders}\n          className={styles.closeAccount}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import { useState } from \"react\";\nimport {\n  makeStyles,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useDexContext } from \"../context/Dex\";\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n    color: theme.palette.primary.main,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n  fairAutoSelected: {\n    backgroundColor: theme.palette.primary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n  },\n  fairAuto: {\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.secondary.light\n        : theme.palette.secondary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\",\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{\n                style: {\n                  borderRadius: \"10px\",\n                  boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n                },\n              }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const styles = useStyles();\n\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n\n  const setSlippageHandler = (value?: number) => {\n    setSlippage(!value || value < 0 ? 0 : value);\n  };\n\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>Settings</Typography>\n      <div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Slippage tolerance\n          </Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Fair price\n          </Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <Button\n              component=\"div\"\n              variant=\"contained\"\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              className={\n                fairOverride === null\n                  ? styles.fairAutoSelected\n                  : styles.fairAuto\n              }\n            >\n              Auto\n            </Button>\n          </div>\n        </div>\n        <div style={{ margin: \"10px 0px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <OpenOrdersDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup style={{ display: \"none\" }} row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useMint } from \"../context/Token\";\nimport { useRoute, useMarketName, useBbo } from \"../context/Dex\";\n\nconst useStyles = makeStyles(() => ({\n  infoLabel: {\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  infoButton: {\n    marginLeft: \"5px\",\n    padding: 0,\n    fontSize: \"14px\",\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {fair !== undefined && toTokenInfo && fromTokenInfo\n          ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n              fromMintInfo?.decimals\n            )} ${fromTokenInfo.symbol}`\n          : `-`}\n      </Typography>\n      <InfoButton />\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info fontSize=\"small\" />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const route = useRoute(fromMint, toMint);\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const bbo = useBbo(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>\n        {bbo && bbo.mid ? bbo.mid.toFixed(6) : \"-\"}\n      </code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  PublicKey,\n  Keypair,\n  Transaction,\n  SystemProgram,\n  Signer,\n} from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Typography,\n  TextField,\n  useTheme,\n} from \"@material-ui/core\";\nimport { ExpandMore, ImportExportRounded } from \"@material-ui/icons\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport {\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n  FEE_MULTIPLIER,\n} from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { useCanSwap, useReferral } from \"../context/Swap\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\nimport { WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    width: theme.spacing(50),\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n    padding: theme.spacing(2),\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    fontSize: 16,\n    fontWeight: 700,\n    padding: theme.spacing(1.5),\n  },\n  swapToFromButton: {\n    display: \"block\",\n    margin: \"10px auto 10px auto\",\n    cursor: \"pointer\",\n  },\n  amountInput: {\n    fontSize: 22,\n    fontWeight: 600,\n  },\n  input: {\n    textAlign: \"right\",\n  },\n  swapTokenFormContainer: {\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 15px 2px rgba(33,150,243,0.1)\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n  },\n  swapTokenSelectorContainer: {\n    marginLeft: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"50%\",\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"14px\",\n  },\n  maxButton: {\n    marginLeft: theme.spacing(1),\n    color: theme.palette.primary.main,\n    fontWeight: 700,\n    fontSize: \"12px\",\n    cursor: \"pointer\",\n  },\n  tokenButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SwapCard({\n  containerStyle,\n  contentStyle,\n  swapTokenContainerStyle,\n}: {\n  containerStyle?: any;\n  contentStyle?: any;\n  swapTokenContainerStyle?: any;\n}) {\n  const styles = useStyles();\n  return (\n    <Card className={styles.card} style={containerStyle}>\n      <SwapHeader />\n      <div style={contentStyle}>\n        <SwapFromForm style={swapTokenContainerStyle} />\n        <ArrowButton />\n        <SwapToForm style={swapTokenContainerStyle} />\n        <InfoLabel />\n        <SwapButton />\n      </div>\n    </Card>\n  );\n}\n\nexport function SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"16px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontSize: 18,\n          fontWeight: 700,\n        }}\n      >\n        SWAP\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const theme = useTheme();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <ImportExportRounded\n      className={styles.swapToFromButton}\n      fontSize=\"large\"\n      htmlColor={theme.palette.primary.main}\n      onClick={swapToFromMints}\n    />\n  );\n}\n\nfunction SwapFromForm({ style }: { style?: any }) {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from\n      style={style}\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm({ style }: { style?: any }) {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from={false}\n      style={style}\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nexport function SwapTokenForm({\n  from,\n  style,\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  from: boolean;\n  style?: any;\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const styles = useStyles();\n\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  const balance =\n    tokenAccount &&\n    mintAccount &&\n    tokenAccount.account.amount.toNumber() / 10 ** mintAccount.decimals;\n\n  const formattedAmount =\n    mintAccount && amount\n      ? amount.toLocaleString(\"fullwide\", {\n          maximumFractionDigits: mintAccount.decimals,\n          useGrouping: false,\n        })\n      : amount;\n\n  return (\n    <div className={styles.swapTokenFormContainer} style={style}>\n      <div className={styles.swapTokenSelectorContainer}>\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <Typography color=\"textSecondary\" className={styles.balanceContainer}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${balance?.toFixed(mintAccount.decimals)}`\n            : `-`}\n          {from && !!balance ? (\n            <span\n              className={styles.maxButton}\n              onClick={() => setAmount(balance)}\n            >\n              MAX\n            </span>\n          ) : null}\n        </Typography>\n      </div>\n      <TextField\n        type=\"number\"\n        value={formattedAmount}\n        onChange={(e) => setAmount(parseFloat(e.target.value))}\n        InputProps={{\n          disableUnderline: true,\n          classes: {\n            root: styles.amountInput,\n            input: styles.input,\n          },\n        }}\n      />\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  const styles = useStyles();\n  const theme = useTheme();\n\n  return (\n    <div onClick={onClick} className={styles.tokenButton}>\n      <TokenIcon mint={mint} style={{ width: theme.spacing(4) }} />\n      <TokenName mint={mint} style={{ fontSize: 14, fontWeight: 700 }} />\n      <ExpandMore />\n    </div>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  const theme = useTheme();\n  let tokenInfo = tokenMap.get(mint.toString());\n\n  return (\n    <Typography\n      style={{\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        ...style,\n      }}\n    >\n      {tokenInfo?.symbol}\n    </Typography>\n  );\n}\n\nexport function SwapButton() {\n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    slippage,\n    isClosingNewAccounts,\n    isStrict,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const canSwap = useCanSwap();\n  const referral = useReferral(fromMarket);\n  const fair = useSwapFair();\n  let fromWallet = useOwnedTokenAccount(fromMint);\n  let toWallet = useOwnedTokenAccount(toMint);\n  const quoteMint = fromMarket && fromMarket.quoteMintAddress;\n  const quoteMintInfo = useMint(quoteMint);\n  const quoteWallet = useOwnedTokenAccount(quoteMint);\n\n  // Click handler.\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    if (!fair) {\n      throw new Error(\"Invalid fair\");\n    }\n    if (!quoteMint || !quoteMintInfo) {\n      throw new Error(\"Quote mint not found\");\n    }\n\n    // All transactions to send for the swap.\n    let txs: { tx: Transaction; signers: Array<Signer | undefined> }[] = [];\n    const amount = new BN(fromAmount * 10 ** fromMintInfo.decimals);\n\n    const isSol =\n      fromMint.equals(WRAPPED_SOL_MINT) || toMint.equals(WRAPPED_SOL_MINT);\n    const wrappedSolAccount = isSol ? Keypair.generate() : undefined;\n\n    // Wrap the SOL into an SPL token.\n    if (isSol) {\n      txs.push(\n        await wrapSol(\n          swapClient.program.provider,\n          wrappedSolAccount as Keypair,\n          fromMint,\n          amount\n        )\n      );\n    }\n\n    // Build the swap.\n    txs.push(\n      ...(await (async () => {\n        if (!fromMarket) {\n          throw new Error(\"Market undefined\");\n        }\n\n        const minExchangeRate = {\n          rate: new BN((10 ** toMintInfo.decimals * FEE_MULTIPLIER) / fair)\n            .muln(100 - slippage)\n            .divn(100),\n          fromDecimals: fromMintInfo.decimals,\n          quoteDecimals: quoteMintInfo.decimals,\n          strict: isStrict,\n        };\n        const fromOpenOrders = fromMarket\n          ? openOrders.get(fromMarket?.address.toString())\n          : undefined;\n        const toOpenOrders = toMarket\n          ? openOrders.get(toMarket?.address.toString())\n          : undefined;\n        const fromWalletAddr = fromMint.equals(WRAPPED_SOL_MINT)\n          ? wrappedSolAccount!.publicKey\n          : fromWallet\n          ? fromWallet.publicKey\n          : undefined;\n        const toWalletAddr = toMint.equals(WRAPPED_SOL_MINT)\n          ? wrappedSolAccount!.publicKey\n          : toWallet\n          ? toWallet.publicKey\n          : undefined;\n\n        return await swapClient.swapTxs({\n          fromMint,\n          toMint,\n          quoteMint,\n          amount,\n          minExchangeRate,\n          referral,\n          fromMarket,\n          toMarket,\n          // Automatically created if undefined.\n          fromOpenOrders: fromOpenOrders\n            ? fromOpenOrders[0].address\n            : undefined,\n          toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n          fromWallet: fromWalletAddr,\n          toWallet: toWalletAddr,\n          quoteWallet: quoteWallet ? quoteWallet.publicKey : undefined,\n          // Auto close newly created open orders accounts.\n          close: isClosingNewAccounts,\n        });\n      })())\n    );\n\n    // Unwrap the SOL.\n    if (isSol) {\n      txs.push(\n        unwrapSol(swapClient.program.provider, wrappedSolAccount as Keypair)\n      );\n    }\n\n    await swapClient.program.provider.sendAll(txs);\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={!canSwap}\n    >\n      Swap\n    </Button>\n  );\n}\n\nasync function wrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair,\n  fromMint: PublicKey,\n  amount: BN\n): Promise<{ tx: Transaction; signers: Array<Signer | undefined> }> {\n  const tx = new Transaction();\n  const signers = [wrappedSolAccount];\n  // Create new, rent exempt account.\n  tx.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: wrappedSolAccount.publicKey,\n      lamports: await Token.getMinBalanceRentForExemptAccount(\n        provider.connection\n      ),\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n  // Transfer lamports. These will be converted to an SPL balance by the\n  // token program.\n  if (fromMint.equals(WRAPPED_SOL_MINT)) {\n    tx.add(\n      SystemProgram.transfer({\n        fromPubkey: provider.wallet.publicKey,\n        toPubkey: wrappedSolAccount.publicKey,\n        lamports: amount.toNumber(),\n      })\n    );\n  }\n  // Initialize the account.\n  tx.add(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey\n    )\n  );\n  return { tx, signers };\n}\n\nfunction unwrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair\n): { tx: Transaction; signers: Array<Signer | undefined> } {\n  const tx = new Transaction();\n  tx.add(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey,\n      []\n    )\n  );\n  return { tx, signers: [] };\n}\n","import \"@fontsource/roboto\";\nimport { ReactElement } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  createMuiTheme,\n  ThemeOptions,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport {\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n} from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useBbo,\n  useFairRoute,\n  useMarketName,\n} from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, {\n  ArrowButton,\n  SwapButton,\n  SwapHeader,\n  SwapTokenForm,\n} from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\nexport default function Swap(props: SwapProps): ReactElement {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral,\n  } = props;\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createMuiTheme(\n    materialTheme || {\n      palette: {\n        primary: {\n          main: \"#2196F3\",\n          contrastText: \"#FFFFFF\",\n        },\n        secondary: {\n          main: \"#E0E0E0\",\n          light: \"#595959\",\n        },\n        error: {\n          main: \"#ff6b6b\",\n        },\n      },\n    }\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TokenListContextProvider tokenList={tokenList}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n              referral={referral}\n            >\n              <SwapCard\n                containerStyle={containerStyle}\n                contentStyle={contentStyle}\n                swapTokenContainerStyle={swapTokenContainerStyle}\n              />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </TokenListContextProvider>\n    </ThemeProvider>\n  );\n}\n\n/**\n * Properties for the `Swap` Component.\n */\nexport type SwapProps = {\n  /**\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\n   * into all transactions intitiated by the component.\n   */\n  provider: Provider;\n\n  /**\n   * Token list providing information for tokens used.\n   */\n  tokenList: TokenListContainer;\n\n  /**\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\n   * To receive referral fees, the wallet must *own* associated token\n   * accounts for the token in which the referral is paid  (usually USDC\n   * or USDT).\n   */\n  referral?: PublicKey;\n\n  /**\n   * The default `fromMint` to use when the component first renders.\n   */\n  fromMint?: PublicKey;\n\n  /**\n   * The default `toMint` to use when the component first renders.\n   */\n  toMint?: PublicKey;\n\n  /**\n   * The initial amount for the `fromMint` to use when the component first\n   * renders.\n   */\n  fromAmount?: number;\n\n  /**\n   * The initial amount for the `toMint` to use when the component first\n   * renders.\n   */\n  toAmount?: number;\n\n  /**\n   * Provide custom material-ui theme.\n   */\n  materialTheme?: ThemeOptions;\n\n  /**\n   * Styling properties for the main container.\n   */\n  containerStyle?: any;\n\n  /**\n   * Styling properties for the content container.\n   */\n  contentStyle?: any;\n\n  /**\n   * Styling properties for the from and to token containers.\n   */\n  swapTokenContainerStyle?: any;\n};\n\nexport {\n  // Components.\n  Swap,\n  SwapCard,\n  SwapHeader,\n  SwapTokenForm,\n  ArrowButton,\n  SwapButton,\n  TokenDialog,\n  // Providers and context.\n  // Swap.\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n  // TokenList.\n  TokenListContextProvider,\n  useTokenMap,\n  // Token.\n  TokenContextProvider,\n  useMint,\n  // Dex.\n  DexContextProvider,\n  useFairRoute,\n  useMarketName,\n  useBbo,\n};\n","import { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Signer,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n}));\n\nfunction AppInner() {\n  const styles = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      className={styles.root}\n    >\n      <Button\n        variant=\"outlined\"\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        style={{ position: \"fixed\", right: 24, top: 24 }}\n      >\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\n      </Button>\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\n    </Grid>\n  );\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    super(connection, wallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      this.onTransaction(undefined, err);\n      return \"\";\n    }\n  }\n\n  async sendAll(\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach((sig) => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      this.onTransaction(undefined, err);\n      return [];\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}